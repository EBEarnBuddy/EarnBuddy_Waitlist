rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isValidUser() {
      return isAuthenticated() && 
             request.auth.uid != null && 
             request.auth.uid.size() > 0;
    }

    // Users collection - users can read/write their own profile
    match /users/{userId} {
      allow read, write: if isAuthenticated() && isOwner(userId);
      allow create: if isAuthenticated() && isOwner(userId);
    }

    // Pods collection - authenticated users can read all, create new ones
    match /pods/{podId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && isValidUser();
      allow update: if isAuthenticated() && (
        // Allow joining/leaving pods (updating members array)
        resource.data.keys().hasAll(request.resource.data.keys()) ||
        // Allow pod creators to update their pods
        resource.data.createdBy == request.auth.uid
      );
      allow delete: if isAuthenticated() && resource.data.createdBy == request.auth.uid;
    }

    // Posts collection - authenticated users can read all, create new ones
    match /posts/{postId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && 
                       isValidUser() && 
                       request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() && (
        // Allow post author to update
        resource.data.userId == request.auth.uid ||
        // Allow others to update likes, replies, bookmarks
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes', 'replies', 'bookmarks', 'updatedAt'])
      );
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }

    // Replies collection - authenticated users can read all, create new ones
    match /replies/{replyId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && 
                       isValidUser() && 
                       request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }

    // Rooms collection - authenticated users can read rooms they're members of
    match /rooms/{roomId} {
      allow read: if isAuthenticated() && (
        request.auth.uid in resource.data.members ||
        resource.data.createdBy == request.auth.uid
      );
      allow create: if isAuthenticated() && 
                       isValidUser() && 
                       request.resource.data.createdBy == request.auth.uid;
      allow update: if isAuthenticated() && (
        // Allow room creator to update
        resource.data.createdBy == request.auth.uid ||
        // Allow members to join/leave (update members array)
        request.auth.uid in resource.data.members ||
        request.auth.uid in request.resource.data.members
      );
      allow delete: if isAuthenticated() && resource.data.createdBy == request.auth.uid;
    }

    // Messages collection - authenticated users can read messages from rooms they're in
    match /messages/{messageId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && 
                       isValidUser() && 
                       request.resource.data.senderId == request.auth.uid;
      allow update: if isAuthenticated() && resource.data.senderId == request.auth.uid;
      allow delete: if isAuthenticated() && resource.data.senderId == request.auth.uid;
    }

    // Startups collection - authenticated users can read all, create new ones
    match /startups/{startupId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && 
                       isValidUser() && 
                       request.resource.data.createdBy == request.auth.uid;
      allow update: if isAuthenticated() && (
        // Allow startup creator to update
        resource.data.createdBy == request.auth.uid ||
        // Allow others to apply (update applicants array)
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['applicants', 'updatedAt'])
      );
      allow delete: if isAuthenticated() && resource.data.createdBy == request.auth.uid;
    }

    // Freelance gigs collection - authenticated users can read all, create new ones
    match /gigs/{gigId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && 
                       isValidUser() && 
                       request.resource.data.postedBy == request.auth.uid;
      allow update: if isAuthenticated() && (
        // Allow gig creator to update
        resource.data.postedBy == request.auth.uid ||
        // Allow others to apply (update applicants array)
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['applicants', 'updatedAt'])
      );
      allow delete: if isAuthenticated() && resource.data.postedBy == request.auth.uid;
    }

    // Notifications collection - users can read their own notifications
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && isValidUser();
      allow update: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }

    // Allow reading and writing to any other collections for authenticated users
    // This is a fallback rule for any collections not explicitly defined above
    match /{document=**} {
      allow read, write: if isAuthenticated();
    }
  }
}